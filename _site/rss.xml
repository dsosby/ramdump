<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
    <title>Feed Name</title>
    <link>http://domain/</link>
    <atom:link href="http://domain/rss.xml" rel="self" type="application/rss+xml" />
    <description></description>
    <language>en-au</language>
    <pubDate>Thu, 02 Apr 2015 09:35:53 %z</pubDate>
    <lastBuildDate>Thu, 02 Apr 2015 09:35:53 %z</lastBuildDate>
    
    <item>
      <title>Chicken Scheme and CouchDB</title>
      <link>http://domain/ChickenScheme/CouchDB/2012/10/24/chicken-scheme-and-couchdb.html</link>
      <pubDate>Wed, 24 Oct 2012 00:00:00 %z</pubDate>
      <author>Author</author>
      <guid>http://domain/ChickenScheme/CouchDB/2012/10/24/chicken-scheme-and-couchdb.html</guid>
      <description>&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;I&apos;ve recently been playing around with &lt;a href=&quot;http://call-cc.org/&quot; target=&quot;_blank&quot;&gt;Chicken Scheme&lt;/a&gt;, leaving poor Clojure all high and dry (minus some visits to the newly started &lt;a href=&quot;http://www.meetup.com/DFW-Clojure/&quot; target=&quot;_blank&quot;&gt;DFW-Clojure User Group&lt;/a&gt;). After building a service in C at work, I&apos;ve caught the high-performance bug and Clojure hasn&apos;t particularly been helpful in that regard. I&apos;ve also found Chicken Scheme to be very simple with a more straightforward syntax than Clojure. I&apos;ll still use Clojure, and am using it on a web-app side-project, but client side I&apos;m really digging Chicken.&lt;/p&gt;
&lt;p&gt;I&apos;ve also been using MongoDB, but (OMG!) there&apos;s no driver currently for MongoDB in Chicken Scheme. Until I have the chops to write my own version, I decided I might as well learn a similar DB: enter &lt;a href=&quot;http://couchdb.apache.org/&quot; target=&quot;_blank&quot;&gt;Couch&lt;/a&gt;. In my naive view, it&apos;s very similar to Mongo - it&apos;s a document-oriented database with JSON (or &lt;a href=&quot;http://bsonspec.org/&quot; target=&quot;_blank&quot;&gt;variation thereof&lt;/a&gt;) as its representative data structure. Even cooler, it&apos;s already been ported to &lt;a href=&quot;http://openbbnews.wordpress.com/2012/01/13/couchdb-playbook/&quot; target=&quot;_blank&quot;&gt;BlackBerry 10&lt;/a&gt;. This gives me some really good ideas for new projects.&lt;/p&gt;
&lt;h2&gt;The Setup&lt;/h2&gt;
&lt;p&gt;I&apos;m currently running &lt;a href=&quot;http://linuxmint.com/&quot; target=&quot;_blank&quot;&gt;Linux Mint&lt;/a&gt;, a &amp;quot;fork&amp;quot; of Ubuntu, so this setup guide follows what was necessary for me to get up and going with Chicken Scheme and CouchDB.&lt;/p&gt;
&lt;h3&gt;Chicken Scheme&lt;/h3&gt;
&lt;p&gt;There are two options. The easy way:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install chicken-bin.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This installs everything for you with no issue, however it&apos;s an older version (as seems to be a common issue with the Ubuntu repositories). At the time of writing it&apos;s at 4.7.0. You can also install Chicken by compiling from source. Download the tarball from &lt;a href=&quot;http://code.call-cc.org/releases/4.8.0/&quot; target=&quot;_blank&quot;&gt;call-cc.org&lt;/a&gt;, untar, and follow the INSTALL instructions. Easy!&lt;/p&gt;
&lt;h3&gt;CouchDB Egg&lt;/h3&gt;
&lt;p&gt;Chicken Scheme has an extension system which packages and distributes &amp;quot;&lt;a href=&quot;http://wiki.call-cc.org/eggs&quot; target=&quot;_blank&quot;&gt;eggs&lt;/a&gt;.&amp;quot; An egg consists of Scheme sources plus some meta information such as build scripts and egg dependencies. You can install an egg using the chicken-install utility that comes with Chicken.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chicken-install -sudo couchdb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will download the &lt;a href=&quot;http://wiki.call-cc.org/eggref/4/couchdb&quot; target=&quot;_blank&quot;&gt;couchdb egg&lt;/a&gt; along with all eggs in the dependency tree. The utility then begins compiling and installing all eggs along the way. If you don&apos;t do a lot of development, chances are likely that you will run into system dependencies that are unmet. Chicken Scheme compiles to C, and as such many eggs have dependencies on C libraries.&lt;/p&gt;
&lt;p&gt;The one I hit with couchdb in particular was openssl. These system lib dependencies can be a little tricky to identify. Two tips:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;See which egg is failing, then find it in the egg index and look through it&apos;s notes which /usually/ indicate dependencies&lt;/li&gt;
&lt;li&gt;Read the error message and decipher from there.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, my first attempt at installing the couchdb egg failed due to missing openssl header files. The install utility was attempting to compile the openssl egg, which was a dependency of the http-client egg, which is a dependency of the couchdb egg.&lt;/p&gt;
&lt;p&gt;A few searches for openssl and I satisfied the dependency with the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install libssl-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that successfully in place, another call to install the couchdb egg succeeded.&lt;/p&gt;
&lt;h2&gt;Playing Around&lt;/h2&gt;
&lt;p&gt;I didn&apos;t have time to compile and install a CouchDB server on my machine, so &lt;em&gt;to the cloud&lt;/em&gt; I went. I signed up for an account at &lt;a href=&quot;https://cloudant.com/&quot; target=&quot;_blank&quot;&gt;cloudant.com&lt;/a&gt; which provides a free-for-small-databases CouchDB compatible database. After signing up, I imported the example database aptly named &amp;quot;crud&amp;quot; and began toying around.&lt;/p&gt;
&lt;p&gt;Booting up csi, the Chicken Scheme interpreter, I called &lt;code&gt;(use couchdb)&lt;/code&gt; and set out to play. The first hurdle: making a connection. The current documentation says to use something along the lines of &lt;code&gt;(define couch (make-connection &amp;quot;databasename&amp;quot; &amp;quot;http://localhost:123&amp;quot;))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That failed miserably.&lt;/p&gt;
&lt;p&gt;No matter what I tried, the command &lt;code&gt;(get-server-info couch)&lt;/code&gt; would fail with a connection refused. &lt;code&gt;(connection-uri couch)&lt;/code&gt; showed that the URI struct was still pointing at localhost. Luckily, the &lt;a href=&quot;http://code.call-cc.org/svn/chicken-eggs/release/4/&quot; target=&quot;_blank&quot;&gt;source for Chicken eggs&lt;/a&gt; are available, even for CouchDB. The make-connection function is created by the &lt;code&gt;(defstruct connection ...)&lt;/code&gt; expression. I noticed that the server attribute of connection struct is a &lt;code&gt;uri-reference&lt;/code&gt;, &lt;em&gt;not&lt;/em&gt; a string. Reading through the defstruct docs I figured out the following worked - woot.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(import uri-common)
(define cloudant-url server: (uri-reference &amp;quot;https://username:password@username.cloudant.com&amp;quot;))
(define cloudant (make-connection server: cloudant-url database: &amp;quot;crud&amp;quot;))
(get-server-info cloudant)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This returns JSON data in Scheme structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#((&amp;quot;couchdb&amp;quot; . &amp;quot;Welcome&amp;quot;)
  (&amp;quot;version&amp;quot; . &amp;quot;1.0.2&amp;quot;)
  (&amp;quot;cloudant_build&amp;quot; . &amp;quot;768&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since I&apos;m new to Scheme, getting the data out was a bit odd, and I&apos;m sure completely inefficient.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(define server-info (vector-&amp;gt;list (get-server-info cloudant)))
(alist-ref &amp;quot;version&amp;quot; server-info equal?)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That about sums it up. Hopefully I figure more stuff out and post some updates. Feel free to comment if I&apos;m reading the JSON structure in a completely asinine way. The vector-&amp;gt;list doesn&apos;t seem right.&lt;/p&gt;
&lt;h2&gt;Update&lt;/h2&gt;
&lt;p&gt;The couchdb egg documentation has been updated to cover most of this. I&apos;ve also noticed a generally handy function that is exported by the couchdb module, json-ref, that makes it simple to grab top-level JSON items like &amp;quot;version&amp;quot; above.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(define server-version (json-ref &apos;version (get-server-info cloudant)))
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>ClojureScript Gotchas &amp; Tips</title>
      <link>http://domain/Clojure/ClojureScript/2012/09/18/clojurescript-gotchas-tips.html</link>
      <pubDate>Tue, 18 Sep 2012 00:00:00 %z</pubDate>
      <author>Author</author>
      <guid>http://domain/Clojure/ClojureScript/2012/09/18/clojurescript-gotchas-tips.html</guid>
      <description>&lt;p&gt;I&apos;ve been playing a lot lately with &lt;a href=&quot;https://github.com/clojure/clojurescript&quot;&gt;ClojureScript&lt;/a&gt;, especially with regards to mobile development (more on that to come later). Clojure has never been known for great error messages, and ClojureScript is probably even worse in that regard.&lt;/p&gt;
&lt;p&gt;Included below are a list of things that gave me a rough time. Some are pretty simple, but needless to say they got me. Hopefully they won&apos;t get you.&lt;/p&gt;
&lt;h2&gt;Gotchas&lt;/h2&gt;
&lt;h3&gt;Namespaces etc&lt;/h3&gt;
&lt;p&gt;The ns function is very special in ClojureScript when compared to Clojure. I won&apos;t go over all the differences, those have been covered, but I&apos;ll highlight a few things quickly: only one namespace per file; use requires only and require requires as; REPL requires load-namespace instead of ns call; invalid require statements don&apos;t give compile errors.&lt;/p&gt;
&lt;p&gt;A big one that got me is requiring/using the Google Closure libs and classes. When you require them in your namespace, the ClojureScript compiler just outputs &lt;code&gt;goog.require(&amp;quot;goog.foobar&amp;quot;)&lt;/code&gt;. The &lt;code&gt;:as&lt;/code&gt; makes no difference here. When you refer to the functions/objects, you have to use the fully qualified name, e.g. &lt;code&gt;(goog.foobar/baz 42)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To sum that annoying issue up, you have to both require and use the fully-qualified name.&lt;/p&gt;
&lt;h3&gt;Interop With JS Objects&lt;/h3&gt;
&lt;p&gt;Sometimes you just have to fall back. Use the js* function to create some straight-up JavaScript:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;((js* &amp;quot;alert&amp;quot;) &amp;quot;Hello&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There will also come a time when you have to create an object to interop with a JavaScript library. It would be nice if ClojureScript maps/lists could be output as an object, but that may just be wishful thinking. In other words, you&apos;ll have to copy and paste one of the dozen or so implementations into your code.&lt;/p&gt;
&lt;p&gt;You can also use the goog.object package for help which is wrapped by several CLJS functions, the primary one being js-obj which takes arguments and simply applies them to goog.object/create.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(js-keys (js-obj &amp;quot;name&amp;quot; &amp;quot;Ben Franklin&amp;quot; &amp;quot;age&amp;quot; 88 &amp;quot;height&amp;quot; 60))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Arity With Functions&lt;/h3&gt;
&lt;p&gt;When you define a function using defn, it creates a JavaScript function in the background. JavaScript functions do not enforce arity. This means you can do something like this without any failure, only unexpected results.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(defn tip-cows [])
(tip-cows 1 &amp;quot;zebra&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;The Compiler Doesn&apos;t Care&lt;/h3&gt;
&lt;p&gt;Don&apos;t expect the compiler to help you out chasing and picking out errors. The compiler only ensures the code can be read and checks for a few minor things (like :require has :as, etc). The vast majority of errors will be found at runtime. You&apos;ll have to change your mindset from compiled language to interpreted language.&lt;/p&gt;
&lt;h2&gt;Tips&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://himera.herokuapp.com&quot; target=&quot;_blank&quot;&gt;Himera ClojureScript REPL&lt;/a&gt; - An online REPL. Very useful! Don&apos;t miss the Summary page.&lt;/p&gt;
&lt;p&gt;Don&apos;t expect &lt;code&gt;(= :ClojureScript :Clojure)&lt;/code&gt;. They are different.&lt;/p&gt;
&lt;p&gt;Surf the &lt;a href=&quot;https://github.com/clojure/clojurescript/blob/master/src/cljs/cljs/core.cljs&quot; target=&quot;_blank&quot;&gt;source&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;When you get a &amp;quot;call undefined&amp;quot; error, you most likely forgot your require, misspelled it, or similar.&lt;/p&gt;
&lt;p&gt;When you get an error, or something goes bad, load up the JavaScript console and play around. It obviously helps to know JavaScript to some extent here. For example, if you get an undefined error in something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;goog.foobar.baz.call(null, helloworld.core.mydef);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You could use the console to probe and find the culprit, e.g. type&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;goog;
goog.foobar;
goog.foobar.baz;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Keep probing the environment to see what is not as is expected.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A human being...</title>
      <link>http://domain/2011/12/27/a-human-being-should-be-a.html</link>
      <pubDate>Tue, 27 Dec 2011 00:00:00 %z</pubDate>
      <author>Author</author>
      <guid>http://domain/2011/12/27/a-human-being-should-be-a.html</guid>
      <description>&lt;blockquote&gt;A human being should be able to change a diaper, plan an invasion, butcher a hog, conn a ship, design a building, write a sonnet, balance accounts, build a wall, set a bone, comfort the dying, take orders, give orders, cooperate, act alone, solve equations, analyze a new problem, pitch manure, program a computer, cook a tasty meal, fight efficiently, die gallantly. Specialization is for insects. - Robert A. Heinlein&lt;/blockquote&gt;
&lt;p&gt;I love this quote. I&apos;ve not read the book, but I now plan on it.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;del&gt;Change a diaper&lt;/del&gt;&lt;/li&gt;&lt;li&gt;Plan an invasian&lt;/li&gt;&lt;li&gt;Butcher a hog&lt;/li&gt;&lt;li&gt;Conn a ship&lt;/li&gt;&lt;li&gt;&lt;del&gt;Design a building&lt;/del&gt;&lt;/li&gt;&lt;li&gt;&lt;del&gt;Write a sonnet&lt;/del&gt;&lt;/li&gt;&lt;li&gt;&lt;del&gt;Balance accounts&lt;/del&gt;&lt;/li&gt;&lt;li&gt;&lt;del&gt;Build a wall&lt;/del&gt;&lt;/li&gt;&lt;li&gt;Set a bone&lt;/li&gt;&lt;li&gt;&lt;del&gt;Comfort the dying&lt;/del&gt;&lt;/li&gt;&lt;li&gt;&lt;del&gt;Take orders&lt;/del&gt;&lt;/li&gt;&lt;li&gt;&lt;del&gt;Give orders&lt;/del&gt;&lt;/li&gt;&lt;li&gt;&lt;del&gt;Cooperate&lt;/del&gt;&lt;/li&gt;&lt;li&gt;&lt;del&gt;Act alone&lt;/del&gt;&lt;/li&gt;&lt;li&gt;&lt;del&gt;Solve equations&lt;/del&gt;&lt;/li&gt;&lt;li&gt;&lt;del&gt;Analyze a new problem&lt;/del&gt;&lt;/li&gt;&lt;li&gt;&lt;del&gt;Pitch manure&lt;/del&gt;&lt;/li&gt;&lt;li&gt;&lt;del&gt;Program a computer&lt;/del&gt;&lt;/li&gt;&lt;li&gt;&lt;del&gt;Cook a tasty meal&lt;/del&gt;&lt;/li&gt;&lt;li&gt;&lt;del&gt;Fight efficiently&lt;/del&gt;&lt;/li&gt;&lt;li&gt;Die gallantly&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;I&apos;m pretty far along on the list, though I think I&apos;ll hold off on completing #21 for as long as possible.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Quick Fix</title>
      <link>http://domain/2011/10/11/a-quick-fix.html</link>
      <pubDate>Tue, 11 Oct 2011 00:00:00 %z</pubDate>
      <author>Author</author>
      <guid>http://domain/2011/10/11/a-quick-fix.html</guid>
      <description>&lt;p&gt;First off, I love using the keyboard. When I&apos;m forced to use the mouse, my heart cries just a bit. The mouse is an excellent and convenient tool, there is no doubt, but if it&apos;s an action I will perform multiple times, I want to automate it with the quick press of a key (or two).&lt;/p&gt;
&lt;p&gt;After looking at XMonad a bit, I wasn&apos;t quite ready to give up my comfortable XFCE-provided window manager but did want to resize my windows in a way that was convenient. A bit of google-fu led me to &lt;a href=&quot;http://tomas.styblo.name/wmctrl/&quot; target=&quot;_blank&quot;&gt;wmctrl&lt;/a&gt; and &lt;a href=&quot;https://github.com/soulfx/stiler&quot; target=&quot;_blank&quot;&gt;stiler.py&lt;/a&gt;. Once installed, I setup a new Runner command in Launchy, a simple call to stiler.py with a corresponding argument, and voila, a new tiling manager. It&apos;s a bit on the slow side, but it&apos;s simple to install and use and fits into my current workflow without much thinking.&lt;/p&gt;
&lt;p&gt;As a side note, I think I&apos;m going to use ramdump.com as more of a Tumblog-type site versus a full-on blog. My notebook is full of ideas, but the perfectionist in me doesn&apos;t like putting out the smaller posts that my time allows. I&apos;ll fight that feeling and use this as my brain dump that I envisioned to begin with.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Obsidian Theme for IDLE</title>
      <link>http://domain/Python/2011/08/04/obsidian-theme-for-idle.html</link>
      <pubDate>Thu, 04 Aug 2011 00:00:00 %z</pubDate>
      <author>Author</author>
      <guid>http://domain/Python/2011/08/04/obsidian-theme-for-idle.html</guid>
      <description>&lt;p&gt;I attempt to use dark backgrounds in all of my editors. I find it much &lt;a href=&quot;http://www.thebestpageintheuniverse.net/c.cgi?u=faq&quot;&gt;easier on my eyes&lt;/a&gt; when I&apos;m staring at code all day long or hacking on something early in the morning. I generally use something close to my favorite color scheme on Notepad++, Obsidian, which I  believe is based on Obsidian Coast in KDE.&lt;/p&gt;
&lt;p&gt;With that said, Python&apos;s IDLE application is harshly bright compared to my normal editors. After a quick Google search I found only a few themes available for IDLE, so I created IDLE highlighting settings that mimic my favorite color scheme. Here is the first draft for all to enjoy. You can also find the latest updates in &lt;a href=&quot;https://gist.github.com/1122904&quot;&gt;this&lt;/a&gt; Gist repo. Installation is easy: just copy and paste these settings into your .idlerc\config-highlight.cfg file in your home directory (creating as necessary), then choose it in your Highlighting settings in IDLE by selecting &amp;quot;Use Custom Theme&amp;quot; and &amp;quot;Obsidian&amp;quot; from the dropdown.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://ramdump.files.wordpress.com/2011/08/idle_obsidian.png&quot;&gt;&lt;img src=&quot;/img/idle_obsidian.png&quot; alt=&quot;Screenshot of Obsidian for IDLE&quot; title=&quot;IDLE Obsidian&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;The Code&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;definition-foreground = #678CB1
error-foreground = #FF0000
string-background = #293134
keyword-foreground = #93C763
normal-foreground = #E0E2E4
comment-background = #293134
hit-foreground = #E0E2E4
builtin-background = #293134
stdout-foreground = #678CB1
cursor-foreground = #E0E2E4
break-background = #293134
comment-foreground = #66747B
hilite-background = #2F393C
hilite-foreground = #E0E2E4
definition-background = #293134
stderr-background = #293134
hit-background = #000000
console-foreground = #E0E2E4
normal-background = #293134
builtin-foreground = #E0E2E4
stdout-background = #293134
console-background = #293134
stderr-foreground = #FB0000
keyword-background = #293134
string-foreground = #EC7600
break-foreground = #E0E2E4
error-background = #293134
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Project Euler Problem 1 in Clojure</title>
      <link>http://domain/Clojure/2011/07/15/project-euler-problem-1-in-clojure.html</link>
      <pubDate>Fri, 15 Jul 2011 00:00:00 %z</pubDate>
      <author>Author</author>
      <guid>http://domain/Clojure/2011/07/15/project-euler-problem-1-in-clojure.html</guid>
      <description>&lt;p&gt;I&apos;ve been trying out &lt;a href=&quot;http://clojure.org&quot; target=&quot;_blank&quot;&gt;Clojure&lt;/a&gt; lately. Reasons, non-exclusive, for choosing Clojure?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&apos;s a &lt;strong&gt;functional&lt;/strong&gt; programming language. I&apos;m unfamiliar with this paradigm and want to expand my horizons.&lt;/li&gt;
&lt;li&gt;It provides for &lt;strong&gt;easy concurrency&lt;/strong&gt;. With multi-core processors the norm now, I want to make sure I get the most out of them.&lt;/li&gt;
&lt;li&gt;It &lt;strong&gt;runs on the JVM&lt;/strong&gt;, which &lt;i&gt;should&lt;/i&gt; mean that I can tie it in to my everyday work, and if I get really stuck provide a mechanism for me to code in something more familiar.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It&apos;s new&lt;/strong&gt;, which satisfies my desire for shiny things.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So with that, the best way to learn a language is to try it out, and &lt;a href=&quot;http://projecteuler.net/&quot; target=&quot;_blank&quot;&gt;Project Euler&lt;/a&gt; provides many fun challenges to get you going. &lt;a href=&quot;http://projecteuler.net/index.php?section=problems&amp;id=1&quot; target=&quot;_blank&quot;&gt;Problem 1&lt;/a&gt; is summarized as such: &amp;quot;Find the sum of all the multiples of 3 or 5 below 1000.&amp;quot; Remember, I&apos;m new to Clojure and &lt;a href=&quot;http://en.wikipedia.org/wiki/Functional_programming&quot; target=&quot;_blank&quot;&gt;functional programming&lt;/a&gt; in general, so if you see issues, feel free to comment.&lt;/p&gt;
&lt;p&gt;The first thing that crosses my mind is how I would do this in procedural languages. First, the naive approach in Java&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public int sumOfMultiples(int[] multiples, int max)  {
    int sum = 0;
    for ( int i=1 ; i```1000 ; i++ )  {
        for ( int j=0 ; j```multiples.length ; j++ )  {
            if ( i % multiples[j] == 0 )  {
                sum++;
                break;   //don&apos;t sum the same multiple twice
            }
        }
    }

    return sum;
}

public void printTest()  {
    System.out.println(&amp;quot;Result = &amp;quot; + sumOfMultiples([3,5], 1000));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Like I said, this is a naive approach and has several issues that I will cover later in the post. But as a first shot, I try porting the idea to Clojure.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;;Project Euler Problem 1
;Return the sum of all unique multiples of 3 and 5 up to 1000

(defn is-multiple [x y]
  (zero? (mod x y)))

(defn multiple3? [x] (is-multiple x 3))
(defn multiple5? [x] (is-multiple x 5))

(defn sum-it-up [sum adder max]
  (if (``` adder max)
    (let [sumadder (if (multiple3? adder) adder (if (multiple5? adder) adder 0))]
      (sum-it-up (+ sum sumadder) (inc adder) max))
    sum))

(defn do-summation [max]
  (sum-it-up 0 1 max))

(println &amp;quot;Result=&amp;quot; (do-summation 1000))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The idea here is the same as the procedural style: loop through numbers 1-1000, and if the number is a multiple of 3 or 5, add it up. Since I don&apos;t want an external state to manipulate throughout the loop, I use recursion and keep track of the state within the function itself. This is the code the got me the correct answer first, so I kept refactoring it as I read more about Clojure.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(defn is-multiple? [x y]
  (zero? (mod x y)))

(defn sum-it-up
  [max]
  (loop [sum 0 adder 1]
    (if (&amp;lt; adder max)
      (let [mult3 (is-multiple? adder 3)
            mult5 (is-multiple? adder 5)
            sumadder (if (or mult3 mult5) adder 0)]
        (recur (+ sum sumadder) (inc adder)))
      sum)))

(time (println &amp;quot;Result=&amp;quot; (sum-it-up 1000)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After a few iterations, this was the result. Things I added include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;a href=&quot;http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/loop&quot; target=&quot;_blank&quot;&gt;loop&lt;/a&gt;/&lt;a href=&quot;http://clojure.org/special_forms#recur&quot; target=&quot;_blank&quot;&gt;recur&lt;/a&gt; - this allows me to define a single function versus two (one to recurse and one to setup) and also allows for &lt;a href=&quot;http://en.wikipedia.org/wiki/Tail_call&quot; target=&quot;_blank&quot;&gt;tail call optimization&lt;/a&gt;. Without the use of recur, the JVM would quickly run out of stack space.&lt;/li&gt;
&lt;li&gt;Removed the specialized is-multiple functions - they were more for experimentation anyways.&lt;/li&gt;
&lt;li&gt;Added a time function to keep track of optimizations. Something like this is a pain in Java, full of boilerplate.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, this solution has a few things that I don&apos;t like: it still requires iterating over all numbers 1 to max, the conditional for multiples looks &amp;quot;wonky&amp;quot; (that&apos;s an official term by the way) and out of place, and it&apos;s still &lt;i&gt;long&lt;/i&gt;. There has to be a cleaner way.&lt;/p&gt;
&lt;p&gt;Clojure has the ability to generate &lt;a href=&quot;http://clojure.org/sequences&quot; target=&quot;_blank&quot;&gt;lazy sequences&lt;/a&gt; - you define the sequences via functions and the values are generated only when retrieved. If I can create a sequence consisting of all multiples of 3 and 5 from 1 to max, I could do a simple call to sum them all. After playing around with the different sequence functions available, I came up with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(defn is-multiple? [x y] (zero? (mod x y)))
(defn sum-it-up [max]
  (reduce + (filter #(or (is-multiple? % 3) (is-multiple? % 5)) (range (inc max)))))

(time (println &amp;quot;Result=&amp;quot; (sum-it-up 1000)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So what does it mean? It&apos;s easiest to read the code from the innermost forms to the outermost. So I&apos;ll start:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(range (inc max))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;generates a lazy-sequence from [0-max] (note inclusive). By lazy, it means it&apos;s not actually in memory and will only be created as called. Note that I could have also done the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(map #(inc %) (range max))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I actually think this makes a little more sense -- it generates 1-max inclusive since we really don&apos;t want 0. However, since 0 doesn&apos;t matter in a summation I went ahead and left it in. Timing showed a difference of 3 ms favoring my chosen implementation.&lt;/p&gt;
&lt;p&gt;Next up we filter that range to only include our multiples using the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(filter #(or (is-multiple? % 3) (is-multiple? % 5)) RANGE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that this also returns a lazy sequence as well. Filter takes two arguments, a predicate function that should return true or false and a collection. In this case, the predicate function is an anonymous function that returns true if the value is a multiple of 3 or 5.&lt;/p&gt;
&lt;p&gt;Now that we have a sequence of all numbers [1-max] that are multiples of 3 or 5, it&apos;s time to sum them up. The code
&lt;code&gt;(reduce + SEQUENCE-OF-MULTIPLES)&lt;/code&gt; is fairly straightforward. It acts like a looping accumulator taking each item off of the sequence and sending it, along with the accumulated value, to the predicate function (plus in this case) and then storing the result into the accumulator. Once all items have been processed, the accumulated result is returned.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>On Descriptive Conditionals</title>
      <link>http://domain/Coding/2011/06/24/on-descriptive-conditionals.html</link>
      <pubDate>Fri, 24 Jun 2011 00:00:00 %z</pubDate>
      <author>Author</author>
      <guid>http://domain/Coding/2011/06/24/on-descriptive-conditionals.html</guid>
      <description>&lt;pre&gt;&lt;code&gt;if ( ((x &amp;gt; y) || (y == z)) &amp;amp;&amp;amp; isSomethingTrue() )  {
    //Do Something
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK, what just happened there? This type of conditional can be painful to read and debug. Is there a better way?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;boolean isXBigEnough = x &amp;gt; y;
boolean isYValid     = y == z;
boolean isInCorrectState = isXBigEnough || isYValid;

if ( isInCorrectState &amp;amp;&amp;amp; isSomethingTrue() )  {
    //Do Something
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pulling anonymous conditionals out into named variables can make reading and debugging code much easier. You can come back to this code a year later and know exactly what it was attempting to do based on the names of the variables. Walking through with a debugger is a piece of cake; we can see exactly which conditional was true or false at runtime without having to perform the checks manually. The second format also allows us to easily modify the conditional values via the debugger to change the execution path at run-time - something difficult to accomplish otherwise. But as with anything in coding, there are tradeoffs. In this particular case, we have a performance hit, and a pretty large one at that.&lt;/p&gt;
&lt;p&gt;I&apos;ve taken the following Java code and examined the bytecode produced to get a better idea of what is happening. First up is the straight conditional.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private boolean methodOne(int a, int b, int c, int d)  {
    if ( a &amp;lt; b &amp;amp;&amp;amp; b &amp;lt; c &amp;amp;&amp;amp; c &amp;lt; d )  {
        return true;
    } else {
        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On compilation, this will produce the following bytecode&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private boolean methodOne(int, int, int, int);
  Code:
   0:   iload_1
   1:   iload_2
   2:   if_icmpge   18
   5:   iload_2
   6:   iload_3
   7:   if_icmpge   18
   10:  iload_3
   11:  iload   4
   13:  if_icmpge   18
   16:  iconst_1
   17:  ireturn
   18:  iconst_0
   19:  ireturn
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reading this, you can see that the compiler takes advantage of &lt;a href=&quot;http://en.wikipedia.org/wiki/Short-circuit_evaluation&quot; title=&quot;short-circuit evaluation&quot; target=&quot;_blank&quot;&gt;short-circuit evaluation&lt;/a&gt;. At first, only the first two arguments are loaded and compared. If the comparison is true, it goes to the return statement. If it&apos;s false, the next two arguments are loaded and evaluated, and so on.&lt;/p&gt;
&lt;p&gt;Now let&apos;s compare to the documented version:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private boolean methodTwo(int a, int b, int c, int d)  {
    boolean first  = a &amp;lt; b;
    boolean second = b &amp;lt; c;
    boolean third  = c &amp;lt; d;

    if ( first &amp;amp;&amp;amp; second &amp;amp;&amp;amp; third )  {
        return true;
    } else {
        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we have separated the conditionals out and described what they actually mean. This is a very simple example, and arguably useless in the real world, but the idea is the same. Below is the bytecode produced:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private boolean methodTwo(int, int, int, int);
  Code:
   0:   iload_1
   1:   iload_2
   2:   if_icmpge   9
   5:   iconst_1
   6:   goto    10
   9:   iconst_0
   10:  istore  5
   12:  iload_2
   13:  iload_3
   14:  if_icmpge   21
   17:  iconst_1
   18:  goto    22
   21:  iconst_0
   22:  istore  6
   24:  iload_3
   25:  iload   4
   27:  if_icmpge   34
   30:  iconst_1
   31:  goto    35
   34:  iconst_0
   35:  istore  7
   37:  iload   5
   39:  ifeq    54
   42:  iload   6
   44:  ifeq    54
   47:  iload   7
   49:  ifeq    54
   52:  iconst_1
   53:  ireturn
   54:  iconst_0
   55:  ireturn
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code is now noticeably longer. Breaking it down, you can see that 0-10 stores the &lt;code&gt;first&lt;/code&gt; boolean&apos;s conditional result. 12-22 store&apos;s &lt;code&gt;second&lt;/code&gt; and 24-35 stores &lt;code&gt;third&lt;/code&gt;. Now to the important conditional, 37-55. This looks almost exactly like &lt;code&gt;methodOne&lt;/code&gt;&apos;s bytecode but it only loads a single value versus two values in &lt;code&gt;methodOne&lt;/code&gt;. It still provides for short-circuit evaluation of the final conditional.&lt;/p&gt;
&lt;p&gt;The issues should be obvious at this point. &lt;code&gt;methodTwo&lt;/code&gt; must perform all of the conditional checks, whereas &lt;code&gt;methodOne&lt;/code&gt; takes advantage of short-circuit evaluation to only perform work as necessary. We must also store an additional value during runtime for each conditional, and with that comes the cost of cleaning it up when it goes out of scope.&lt;/p&gt;
&lt;p&gt;To compare the run-time performance of the two approaches, I benchmarked the simplest cases that do not take advantage of short-circuit evaluation since the short-circuit may or may not run.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    private boolean methodOne(int a, int b)  {
        if ( a &amp;lt; b )  {
            return true;
        } else {
            return false;
        }
    }
    
    private boolean methodTwo(int a, int b)  {
        boolean first  = a &amp;lt; b;
    
        if ( first )  {
            return true;
        } else {
            return false;
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Benchmarking this simple code shows that the mere act of storing a new boolean slows the method down by &lt;b&gt;18%&lt;/b&gt;. With more conditionals and use of short-circuit evaluation, the performance hit will only go up from there.&lt;/p&gt;
&lt;p&gt;With that said, this is still extremely fast code; on my laptop running each of these methods 10 million times each, &lt;code&gt;methodOne&lt;/code&gt; was only faster than &lt;code&gt;methodTwo&lt;/code&gt; by 14 ms. That&apos;s only a 1.4 nanosecond difference between each method.&lt;/p&gt;
&lt;p&gt;So the question remains, is descriptively naming your conditionals a worthy practice? The answer will depend on your exact situation. For me, I prefer the more descriptive format that naming conditionals provides, and the debugging aspect really puts it over the top. There have been several times where I was able to effectively identify and resolve buggy code by breaking down large and obscure conditionals into their component parts and labeling them with descriptive variables.&lt;/p&gt;
&lt;p&gt;My general approach to writing complex conditionals is to use descriptive naming first, then optimizing later &lt;a href=&quot;http://c2.com/cgi/wiki?PrematureOptimization&quot; target=&quot;_blank&quot;&gt;if it is needed&lt;/a&gt;. The majority of the time, it&apos;s not, and I&apos;d rather be able to read and debug my code than worry about a few nanoseconds performance hit. Refactoring into the optimized form is a trivial exercise. And with the knowledge gained by actually testing both approaches and looking at the bytecode that is produced, you should be able to make a more informed decision as to which is better for any given situation.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Birth of RAM Dump</title>
      <link>http://domain/2011/06/16/the-birth-of-ram-dump.html</link>
      <pubDate>Thu, 16 Jun 2011 00:00:00 %z</pubDate>
      <author>Author</author>
      <guid>http://domain/2011/06/16/the-birth-of-ram-dump.html</guid>
      <description>&lt;p&gt;As is custom in the virtual world, I have created a new place to post my thoughts on software development, technology, and the life of a programmer.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;About the Name&lt;/b&gt;
I wanted a place to be able to dump my thoughts on technical subjects. I had just read a bug report email that mentioned a RAM dump being available and the lightbulb went off. I think it fits (what I intend to be) the theme of this blog perfectly: you&apos;ll probably get a lot of garbage but I&apos;m sure in that mess you&apos;ll find several useful tidbits!&lt;/p&gt;
&lt;p&gt;I performed a quick check of ramdump.com and to my surprise it was available. Not wanting to have it &lt;a href=&quot;http://en.wikipedia.org/wiki/Domain_squatting&quot; target=&quot;_blank&quot;&gt;squatted&lt;/a&gt; on, I went ahead and purchased the domain. Hopefully the outlay of money will entice me to write more often. :)&lt;/p&gt;
&lt;p&gt;&lt;b&gt;The What &amp;amp; When&lt;/b&gt;
My initial plans are to post at least twice a week. Topics will be on anything that crosses my mind and will focus on software development as it pertains to me -- so lots of Java, mobile development and &amp;quot;fun time&amp;quot; projects like Scala.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;What Else&lt;/b&gt;
Follow the blog &lt;a href=&quot;a%20href=%22http://twitter.com/#!/ramdump%22&quot;&gt;a href=&amp;quot;http://twitter.com/#!/ramdump&amp;quot;&lt;/a&gt;@ramdump&lt;/a&gt;, or follow me &lt;a href=&quot;a%20href=%22http://twitter.com/#!/dsosby%22&quot;&gt;a href=&amp;quot;http://twitter.com/#!/dsosby&amp;quot;&lt;/a&gt;@dsosby&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel> 
</rss>